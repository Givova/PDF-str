from flask import Flask, request, jsonify, send_file
from flask_cors import CORS
import os
import tempfile
from datetime import datetime
from field_9_inserter import validate_date, parse_date, insert_policy_data, convert_to_uppercase

app = Flask(__name__)
CORS(app)  # –†–∞–∑—Ä–µ—à–∞–µ–º CORS –¥–ª—è —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞

@app.route('/api/generate-pdf', methods=['POST'])
def generate_pdf():
    """
    API endpoint –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ PDF —Å –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ —Ñ–æ—Ä–º—ã
    """
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –∑–∞–ø—Ä–æ—Å–∞
        data = request.get_json()
        
        # –í–∞–ª–∏–¥–∏—Ä—É–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
        required_fields = ['fio', 'address', 'date_start', 'date_end', 'reg_number', 'vehicle_type', 'brand_model']
        for field in required_fields:
            if field not in data or not data[field].strip():
                return jsonify({'error': f'–ü–æ–ª–µ {field} –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è'}), 400
        
        # –í–∞–ª–∏–¥–∏—Ä—É–µ–º –¥–∞—Ç—ã
        try:
            validate_date(data['date_start'])
            validate_date(data['date_end'])
        except ValueError as e:
            return jsonify({'error': str(e)}), 400
        
        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è PDF
        with tempfile.NamedTemporaryFile(suffix='.pdf', delete=False) as tmp_file:
            temp_path = tmp_file.name
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º PDF
        insert_policy_data(
            fio=data['fio'],
            address=data['address'],
            date_start=data['date_start'],
            date_end=data['date_end'],
            reg_number=data['reg_number'],
            vehicle_type=data['vehicle_type'],
            brand_model=data['brand_model'],
            output_path=temp_path
        )
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ñ–∞–π–ª
        return send_file(
            temp_path,
            as_attachment=True,
            download_name=f'policy_{datetime.now().strftime("%Y%m%d_%H%M%S")}.pdf',
            mimetype='application/pdf'
        )
        
    except Exception as e:
        return jsonify({'error': f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ PDF: {str(e)}'}), 500
    
    finally:
        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
        try:
            if 'temp_path' in locals():
                os.unlink(temp_path)
        except:
            pass

@app.route('/api/health', methods=['GET'])
def health_check():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ API"""
    return jsonify({'status': 'OK', 'message': 'PDF Generator API —Ä–∞–±–æ—Ç–∞–µ—Ç'})

@app.route('/api/validate-date', methods=['POST'])
def validate_date_endpoint():
    """–í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞—Ç—ã"""
    try:
        data = request.get_json()
        date_string = data.get('date')
        
        if not date_string:
            return jsonify({'valid': False, 'error': '–î–∞—Ç–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞'}), 400
            
        if validate_date(date_string):
            return jsonify({'valid': True})
        else:
            return jsonify({'valid': False, 'error': '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã'})
            
    except Exception as e:
        return jsonify({'valid': False, 'error': str(e)}), 400

@app.route('/api/convert-uppercase', methods=['POST'])
def convert_uppercase_endpoint():
    """–ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –≤ –∑–∞–≥–ª–∞–≤–Ω—ã–µ –±—É–∫–≤—ã"""
    try:
        data = request.get_json()
        
        if not data:
            return jsonify({'error': '–î–∞–Ω–Ω—ã–µ –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω—ã'}), 400
        
        result = {}
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –§–ò–û –µ—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω–æ
        if 'fio' in data:
            result['fio'] = convert_to_uppercase(data['fio'])
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∞–¥—Ä–µ—Å –µ—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω
        if 'address' in data:
            result['address'] = convert_to_uppercase(data['address'])
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –ª—é–±–æ–π –¥—Ä—É–≥–æ–π —Ç–µ–∫—Å—Ç –µ—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω
        if 'text' in data:
            result['text'] = convert_to_uppercase(data['text'])
        
        return jsonify(result)
        
    except Exception as e:
        return jsonify({'error': f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–∏: {str(e)}'}), 500

@app.route('/api/vehicle-brands', methods=['GET'])
def get_vehicle_brands():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –º–∞—Ä–æ–∫ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π"""
    try:
        import json
        
        # –ß–∏—Ç–∞–µ–º JSON —Ñ–∞–π–ª —Å –º–æ–¥–µ–ª—è–º–∏
        with open('./data/models.json', 'r', encoding='utf-8') as f:
            models_data = json.load(f)
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –º–∞—Ä–∫–∏
        brands = []
        for brand in models_data.get('data', []):
            brands.append({
                'id': brand['id'],
                'name': brand['name'],
                'cyrillic_name': brand.get('cyrillic_name', brand['name'])
            })
        
        return jsonify({'brands': brands})
        
    except Exception as e:
        return jsonify({'error': f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–∞—Ä–æ–∫: {str(e)}'}), 500

@app.route('/api/vehicle-models/<brand_id>', methods=['GET'])
def get_vehicle_models(brand_id):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –º–æ–¥–µ–ª–µ–π –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–π –º–∞—Ä–∫–∏"""
    try:
        import json
        
        # –ß–∏—Ç–∞–µ–º JSON —Ñ–∞–π–ª —Å –º–æ–¥–µ–ª—è–º–∏
        with open('./data/models.json', 'r', encoding='utf-8') as f:
            models_data = json.load(f)
        
        # –ò—â–µ–º –º–∞—Ä–∫—É
        models = []
        for brand in models_data.get('data', []):
            if brand['id'] == brand_id.upper():
                for model in brand.get('models', []):
                    models.append({
                        'id': model['id'],
                        'name': model['name'],
                        'cyrillic_name': model.get('cyrillic_name', model['name']),
                        'full_name': f"{brand['name']} {model['name']}"
                    })
                break
        
        return jsonify({'models': models})
        
    except Exception as e:
        return jsonify({'error': f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–æ–¥–µ–ª–µ–π: {str(e)}'}), 500

@app.route('/api/search-vehicles', methods=['GET'])
def search_vehicles():
    """–ü–æ–∏—Å–∫ –º–∞—Ä–æ–∫ –∏ –º–æ–¥–µ–ª–µ–π –ø–æ –∑–∞–ø—Ä–æ—Å—É"""
    try:
        import json
        query = request.args.get('q', '').strip().lower()
        
        if not query or len(query) < 2:
            return jsonify({'results': []})
        
        # –ß–∏—Ç–∞–µ–º JSON —Ñ–∞–π–ª —Å –º–æ–¥–µ–ª—è–º–∏
        with open('./data/models.json', 'r', encoding='utf-8') as f:
            models_data = json.load(f)
        
        results = []
        
        # –ü–æ–∏—Å–∫ –ø–æ –º–∞—Ä–∫–∞–º –∏ –º–æ–¥–µ–ª—è–º
        for brand in models_data.get('data', []):
            brand_name = brand['name'].lower()
            brand_cyrillic = brand.get('cyrillic_name', '').lower()
            
            # –ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –º–∞—Ä–∫–∏
            if query in brand_name or query in brand_cyrillic:
                results.append({
                    'type': 'brand',
                    'value': brand['name'],
                    'label': f"{brand['name']} ({brand.get('cyrillic_name', brand['name'])})"
                })
            
            # –ü–æ–∏—Å–∫ –ø–æ –º–æ–¥–µ–ª—è–º
            for model in brand.get('models', []):
                model_name = model['name'].lower()
                model_cyrillic = model.get('cyrillic_name', '').lower()
                full_name = f"{brand['name']} {model['name']}".lower()
                
                if query in model_name or query in model_cyrillic or query in full_name:
                    results.append({
                        'type': 'model',
                        'value': f"{brand['name']} {model['name']}",
                        'label': f"{brand['name']} {model['name']} ({model.get('cyrillic_name', model['name'])})"
                    })
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        results = results[:20]
        
        return jsonify({'results': results})
        
    except Exception as e:
        return jsonify({'error': f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ: {str(e)}'}), 500

if __name__ == '__main__':
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —Ñ–∞–π–ª–æ–≤
    if not os.path.exists('./data/Shablon.pdf'):
        print("–û–®–ò–ë–ö–ê: –§–∞–π–ª ./data/Shablon.pdf –Ω–µ –Ω–∞–π–¥–µ–Ω")
        exit(1)
    
    print("üöÄ –ó–∞–ø—É—Å–∫ PDF Generator API...")
    print("üìÑ –®–∞–±–ª–æ–Ω PDF: ./data/Shablon.pdf")
    print("üåê API –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ –∞–¥—Ä–µ—Å—É: http://localhost:5000")
    print("üìù Endpoints:")
    print("   POST /api/generate-pdf - –ì–µ–Ω–µ—Ä–∞—Ü–∏—è PDF")
    print("   GET  /api/health - –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏")
    print("   POST /api/validate-date - –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞—Ç—ã")
    print("   POST /api/convert-uppercase - –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤ –∑–∞–≥–ª–∞–≤–Ω—ã–µ –±—É–∫–≤—ã")
    print("   GET  /api/vehicle-brands - –°–ø–∏—Å–æ–∫ –º–∞—Ä–æ–∫ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π")
    print("   GET  /api/vehicle-models/<brand_id> - –ú–æ–¥–µ–ª–∏ –¥–ª—è –º–∞—Ä–∫–∏")
    print("   GET  /api/search-vehicles?q=<query> - –ü–æ–∏—Å–∫ –º–∞—Ä–æ–∫ –∏ –º–æ–¥–µ–ª–µ–π")
    
    app.run(debug=True, host='0.0.0.0', port=5000)
