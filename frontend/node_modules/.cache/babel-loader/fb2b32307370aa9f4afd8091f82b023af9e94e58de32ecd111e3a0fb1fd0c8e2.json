{"ast":null,"code":"// Разрешенные кириллические буквы согласно ГОСТ Р 50577-2018\nexport const ALLOWED_LETTERS = 'АВЕКМНОРСТУХ';\n\n// Интерфейс для результата валидации\n\n/**\r\n * Валидация регистрационного знака согласно ГОСТ Р 50577-2018\r\n */\nexport class LicensePlateValidator {\n  /**\r\n   * Основная функция валидации\r\n   */\n  static validate(data) {\n    const errors = [];\n    const warnings = [];\n    switch (data.category) {\n      case 'standard':\n        return this.validateStandard(data);\n      case 'trailer':\n        return this.validateTrailer(data);\n      case 'tractor':\n        return this.validateTractor(data);\n      case 'motorcycle':\n        return this.validateMotorcycle(data);\n      default:\n        errors.push('Неизвестная категория транспортного средства');\n        return {\n          isValid: false,\n          errors,\n          warnings\n        };\n    }\n  }\n\n  /**\r\n   * Валидация для стандартных автомобилей (L NNN LL | RR(R))\r\n   * Формат: А123ВС 77\r\n   */\n  static validateStandard(data) {\n    const errors = [];\n    const warnings = [];\n\n    // Проверяем наличие всех обязательных полей\n    if (!data.letter1) {\n      errors.push('Не указана первая буква номера');\n    } else if (data.letter1.length !== 1) {\n      errors.push('Первая буква должна содержать ровно один символ');\n    } else if (!ALLOWED_LETTERS.includes(data.letter1)) {\n      errors.push(`Первая буква \"${data.letter1}\" не разрешена. Используйте: ${ALLOWED_LETTERS}`);\n    }\n    if (!data.digits) {\n      errors.push('Не указаны цифры номера');\n    } else if (data.digits.length !== 3) {\n      errors.push('Цифровая часть должна содержать ровно 3 цифры');\n    } else if (!/^\\d{3}$/.test(data.digits)) {\n      errors.push('Цифровая часть должна содержать только цифры');\n    }\n    if (!data.letters) {\n      errors.push('Не указаны буквы номера');\n    } else if (data.letters.length !== 2) {\n      errors.push('Буквенная часть должна содержать ровно 2 буквы');\n    } else {\n      for (const letter of data.letters) {\n        if (!ALLOWED_LETTERS.includes(letter)) {\n          errors.push(`Буква \"${letter}\" не разрешена. Используйте: ${ALLOWED_LETTERS}`);\n          break;\n        }\n      }\n    }\n    if (!data.region) {\n      errors.push('Не указан код региона');\n    } else if (data.region.length < 2 || data.region.length > 3) {\n      errors.push('Код региона должен содержать 2 или 3 цифры');\n    } else if (!/^\\d{2,3}$/.test(data.region)) {\n      errors.push('Код региона должен содержать только цифры');\n    } else if (data.region === '00' || data.region === '000') {\n      errors.push('Код региона не может состоять только из нулей');\n    } else {\n      // Проверяем валидность кода региона (базовая проверка)\n      const regionCode = parseInt(data.region);\n      if (regionCode > 999) {\n        errors.push('Код региона не может быть больше 999');\n      }\n      if (regionCode < 1) {\n        errors.push('Код региона должен быть больше 0');\n      }\n    }\n    return {\n      isValid: errors.length === 0,\n      errors,\n      warnings\n    };\n  }\n\n  /**\r\n   * Валидация для прицепов (LL NNNN | RR(R))\r\n   * Формат: ММ9768 77\r\n   */\n  static validateTrailer(data) {\n    const errors = [];\n    const warnings = [];\n\n    // Проверяем наличие всех обязательных полей\n    if (!data.trailerLetters) {\n      errors.push('Не указаны буквы номера прицепа');\n    } else if (data.trailerLetters.length !== 2) {\n      errors.push('Буквенная часть должна содержать ровно 2 буквы');\n    } else {\n      for (const letter of data.trailerLetters) {\n        if (!ALLOWED_LETTERS.includes(letter)) {\n          errors.push(`Буква \"${letter}\" не разрешена. Используйте: ${ALLOWED_LETTERS}`);\n          break;\n        }\n      }\n    }\n    if (!data.trailerDigits) {\n      errors.push('Не указаны цифры номера прицепа');\n    } else if (data.trailerDigits.length !== 4) {\n      errors.push('Цифровая часть должна содержать ровно 4 цифры');\n    } else if (!/^\\d{4}$/.test(data.trailerDigits)) {\n      errors.push('Цифровая часть должна содержать только цифры');\n    }\n    if (!data.region) {\n      errors.push('Не указан код региона');\n    } else if (data.region.length < 2 || data.region.length > 3) {\n      errors.push('Код региона должен содержать 2 или 3 цифры');\n    } else if (!/^\\d{2,3}$/.test(data.region)) {\n      errors.push('Код региона должен содержать только цифры');\n    } else if (data.region === '00' || data.region === '000') {\n      errors.push('Код региона не может состоять только из нулей');\n    }\n    return {\n      isValid: errors.length === 0,\n      errors,\n      warnings\n    };\n  }\n\n  /**\r\n   * Валидация для тракторов (верх NNNN, низ LL RR(R))\r\n   * Формат: 1234 АБ 77\r\n   */\n  static validateTractor(data) {\n    const errors = [];\n    const warnings = [];\n\n    // Проверяем верхнюю строку (4 цифры)\n    if (!data.topDigits) {\n      errors.push('Не указаны цифры верхней строки');\n    } else if (data.topDigits.length !== 4) {\n      errors.push('Верхняя строка должна содержать ровно 4 цифры');\n    } else if (!/^\\d{4}$/.test(data.topDigits)) {\n      errors.push('Верхняя строка должна содержать только цифры');\n    }\n\n    // Проверяем нижнюю строку (2 буквы)\n    if (!data.bottomLetters) {\n      errors.push('Не указаны буквы нижней строки');\n    } else if (data.bottomLetters.length !== 2) {\n      errors.push('Нижняя строка должна содержать ровно 2 буквы');\n    } else {\n      for (const letter of data.bottomLetters) {\n        if (!ALLOWED_LETTERS.includes(letter)) {\n          errors.push(`Буква \"${letter}\" не разрешена. Используйте: ${ALLOWED_LETTERS}`);\n          break;\n        }\n      }\n    }\n\n    // Проверяем код региона нижней строки\n    if (!data.bottomRegion) {\n      errors.push('Не указан код региона');\n    } else if (data.bottomRegion.length < 2 || data.bottomRegion.length > 3) {\n      errors.push('Код региона должен содержать 2 или 3 цифры');\n    } else if (!/^\\d{2,3}$/.test(data.bottomRegion)) {\n      errors.push('Код региона должен содержать только цифры');\n    } else if (data.bottomRegion === '00' || data.bottomRegion === '000') {\n      errors.push('Код региона не может состоять только из нулей');\n    }\n    return {\n      isValid: errors.length === 0,\n      errors,\n      warnings\n    };\n  }\n\n  /**\r\n   * Валидация для мотоциклов (верх NNNN, низ LL RR(R))\r\n   * Формат: 5678 ВГ 77\r\n   */\n  static validateMotorcycle(data) {\n    // Для мотоциклов используется та же валидация, что и для тракторов\n    return this.validateTractor(data);\n  }\n\n  /**\r\n   * Генерация текстового представления номера\r\n   */\n  static generatePlateText(data) {\n    switch (data.category) {\n      case 'standard':\n        if (data.letter1 && data.digits && data.letters && data.region) {\n          return `${data.letter1}${data.digits}${data.letters} ${data.region}`;\n        }\n        break;\n      case 'trailer':\n        if (data.trailerLetters && data.trailerDigits && data.region) {\n          return `${data.trailerLetters}${data.trailerDigits} ${data.region}`;\n        }\n        break;\n      case 'tractor':\n      case 'motorcycle':\n        if (data.topDigits && data.bottomLetters && data.bottomRegion) {\n          return `${data.topDigits} ${data.bottomLetters} ${data.bottomRegion}`;\n        }\n        break;\n    }\n    return '';\n  }\n\n  /**\r\n   * Парсинг номера из строки\r\n   */\n  static parseFromString(plateText, category) {\n    const cleaned = plateText.replace(/\\s+/g, ' ').trim().toUpperCase();\n    try {\n      switch (category) {\n        case 'standard':\n          {\n            // Формат: А123ВС 77 или А123ВС77\n            const match = cleaned.match(/^([АВЕКМНОРСТУХ])(\\d{3})([АВЕКМНОРСТУХ]{2})\\s*(\\d{2,3})$/);\n            if (match) {\n              return {\n                category: 'standard',\n                letter1: match[1],\n                digits: match[2],\n                letters: match[3],\n                region: match[4]\n              };\n            }\n            break;\n          }\n        case 'trailer':\n          {\n            // Формат: ММ9768 77 или ММ976877\n            const match = cleaned.match(/^([АВЕКМНОРСТУХ]{2})(\\d{4})\\s*(\\d{2,3})$/);\n            if (match) {\n              return {\n                category: 'trailer',\n                trailerLetters: match[1],\n                trailerDigits: match[2],\n                region: match[3]\n              };\n            }\n            break;\n          }\n        case 'tractor':\n        case 'motorcycle':\n          {\n            // Формат: 1234 АБ 77 или 1234АБ77\n            const match = cleaned.match(/^(\\d{4})\\s*([АВЕКМНОРСТУХ]{2})\\s*(\\d{2,3})$/);\n            if (match) {\n              return {\n                category,\n                topDigits: match[1],\n                bottomLetters: match[2],\n                bottomRegion: match[3]\n              };\n            }\n            break;\n          }\n      }\n    } catch (error) {\n      console.error('Error parsing license plate:', error);\n    }\n    return null;\n  }\n}\n\n/**\r\n * Утилитарные функции для работы с номерами\r\n */\nexport const licensePlateUtils = {\n  /**\r\n   * Фильтрация ввода для букв\r\n   */\n  filterLetters: input => {\n    return input.toUpperCase().split('').filter(char => ALLOWED_LETTERS.includes(char)).join('');\n  },\n  /**\r\n   * Фильтрация ввода для цифр\r\n   */\n  filterDigits: input => {\n    return input.replace(/\\D/g, '');\n  },\n  /**\r\n   * Проверка валидности кода региона\r\n   */\n  isValidRegion: region => {\n    if (!/^\\d{2,3}$/.test(region)) return false;\n    const code = parseInt(region);\n    return code > 0 && code <= 999;\n  },\n  /**\r\n   * Форматирование номера для отображения\r\n   */\n  formatForDisplay: data => {\n    return LicensePlateValidator.generatePlateText(data);\n  },\n  /**\r\n   * Получение примера номера для категории\r\n   */\n  getExample: category => {\n    switch (category) {\n      case 'standard':\n        return 'А123ВС 77';\n      case 'trailer':\n        return 'ММ9768 77';\n      case 'tractor':\n        return '1234 АБ 77';\n      case 'motorcycle':\n        return '5678 ВГ 77';\n      default:\n        return '';\n    }\n  },\n  /**\r\n   * Получение описания формата для категории\r\n   */\n  getFormatDescription: category => {\n    switch (category) {\n      case 'standard':\n        return 'L NNN LL | RR(R) - буква, 3 цифры, 2 буквы, код региона';\n      case 'trailer':\n        return 'LL NNNN | RR(R) - 2 буквы, 4 цифры, код региона';\n      case 'tractor':\n        return 'Верх: NNNN, Низ: LL RR(R) - 4 цифры, 2 буквы, код региона';\n      case 'motorcycle':\n        return 'Верх: NNNN, Низ: LL RR(R) - 4 цифры, 2 буквы, код региона';\n      default:\n        return '';\n    }\n  }\n};","map":{"version":3,"names":["ALLOWED_LETTERS","LicensePlateValidator","validate","data","errors","warnings","category","validateStandard","validateTrailer","validateTractor","validateMotorcycle","push","isValid","letter1","length","includes","digits","test","letters","letter","region","regionCode","parseInt","trailerLetters","trailerDigits","topDigits","bottomLetters","bottomRegion","generatePlateText","parseFromString","plateText","cleaned","replace","trim","toUpperCase","match","error","console","licensePlateUtils","filterLetters","input","split","filter","char","join","filterDigits","isValidRegion","code","formatForDisplay","getExample","getFormatDescription"],"sources":["F:/Work/Projects/Clone-pdf/pdf-coordinate-example/frontend/src/utils/licensePlateValidation.ts"],"sourcesContent":["import { LicensePlateData, VehicleCategory } from '../types'\r\n\r\n// Разрешенные кириллические буквы согласно ГОСТ Р 50577-2018\r\nexport const ALLOWED_LETTERS = 'АВЕКМНОРСТУХ'\r\n\r\n// Интерфейс для результата валидации\r\nexport interface ValidationResult {\r\n\tisValid: boolean\r\n\terrors: string[]\r\n\twarnings?: string[]\r\n}\r\n\r\n/**\r\n * Валидация регистрационного знака согласно ГОСТ Р 50577-2018\r\n */\r\nexport class LicensePlateValidator {\r\n\t/**\r\n\t * Основная функция валидации\r\n\t */\r\n\tstatic validate(data: LicensePlateData): ValidationResult {\r\n\t\tconst errors: string[] = []\r\n\t\tconst warnings: string[] = []\r\n\r\n\t\tswitch (data.category) {\r\n\t\t\tcase 'standard':\r\n\t\t\t\treturn this.validateStandard(data)\r\n\t\t\tcase 'trailer':\r\n\t\t\t\treturn this.validateTrailer(data)\r\n\t\t\tcase 'tractor':\r\n\t\t\t\treturn this.validateTractor(data)\r\n\t\t\tcase 'motorcycle':\r\n\t\t\t\treturn this.validateMotorcycle(data)\r\n\t\t\tdefault:\r\n\t\t\t\terrors.push('Неизвестная категория транспортного средства')\r\n\t\t\t\treturn { isValid: false, errors, warnings }\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Валидация для стандартных автомобилей (L NNN LL | RR(R))\r\n\t * Формат: А123ВС 77\r\n\t */\r\n\tprivate static validateStandard(data: LicensePlateData): ValidationResult {\r\n\t\tconst errors: string[] = []\r\n\t\tconst warnings: string[] = []\r\n\r\n\t\t// Проверяем наличие всех обязательных полей\r\n\t\tif (!data.letter1) {\r\n\t\t\terrors.push('Не указана первая буква номера')\r\n\t\t} else if (data.letter1.length !== 1) {\r\n\t\t\terrors.push('Первая буква должна содержать ровно один символ')\r\n\t\t} else if (!ALLOWED_LETTERS.includes(data.letter1)) {\r\n\t\t\terrors.push(`Первая буква \"${data.letter1}\" не разрешена. Используйте: ${ALLOWED_LETTERS}`)\r\n\t\t}\r\n\r\n\t\tif (!data.digits) {\r\n\t\t\terrors.push('Не указаны цифры номера')\r\n\t\t} else if (data.digits.length !== 3) {\r\n\t\t\terrors.push('Цифровая часть должна содержать ровно 3 цифры')\r\n\t\t} else if (!/^\\d{3}$/.test(data.digits)) {\r\n\t\t\terrors.push('Цифровая часть должна содержать только цифры')\r\n\t\t}\r\n\r\n\t\tif (!data.letters) {\r\n\t\t\terrors.push('Не указаны буквы номера')\r\n\t\t} else if (data.letters.length !== 2) {\r\n\t\t\terrors.push('Буквенная часть должна содержать ровно 2 буквы')\r\n\t\t} else {\r\n\t\t\tfor (const letter of data.letters) {\r\n\t\t\t\tif (!ALLOWED_LETTERS.includes(letter)) {\r\n\t\t\t\t\terrors.push(`Буква \"${letter}\" не разрешена. Используйте: ${ALLOWED_LETTERS}`)\r\n\t\t\t\t\tbreak\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (!data.region) {\r\n\t\t\terrors.push('Не указан код региона')\r\n\t\t} else if (data.region.length < 2 || data.region.length > 3) {\r\n\t\t\terrors.push('Код региона должен содержать 2 или 3 цифры')\r\n\t\t} else if (!/^\\d{2,3}$/.test(data.region)) {\r\n\t\t\terrors.push('Код региона должен содержать только цифры')\r\n\t\t} else if (data.region === '00' || data.region === '000') {\r\n\t\t\terrors.push('Код региона не может состоять только из нулей')\r\n\t\t} else {\r\n\t\t\t// Проверяем валидность кода региона (базовая проверка)\r\n\t\t\tconst regionCode = parseInt(data.region)\r\n\t\t\tif (regionCode > 999) {\r\n\t\t\t\terrors.push('Код региона не может быть больше 999')\r\n\t\t\t}\r\n\t\t\tif (regionCode < 1) {\r\n\t\t\t\terrors.push('Код региона должен быть больше 0')\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn {\r\n\t\t\tisValid: errors.length === 0,\r\n\t\t\terrors,\r\n\t\t\twarnings,\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Валидация для прицепов (LL NNNN | RR(R))\r\n\t * Формат: ММ9768 77\r\n\t */\r\n\tprivate static validateTrailer(data: LicensePlateData): ValidationResult {\r\n\t\tconst errors: string[] = []\r\n\t\tconst warnings: string[] = []\r\n\r\n\t\t// Проверяем наличие всех обязательных полей\r\n\t\tif (!data.trailerLetters) {\r\n\t\t\terrors.push('Не указаны буквы номера прицепа')\r\n\t\t} else if (data.trailerLetters.length !== 2) {\r\n\t\t\terrors.push('Буквенная часть должна содержать ровно 2 буквы')\r\n\t\t} else {\r\n\t\t\tfor (const letter of data.trailerLetters) {\r\n\t\t\t\tif (!ALLOWED_LETTERS.includes(letter)) {\r\n\t\t\t\t\terrors.push(`Буква \"${letter}\" не разрешена. Используйте: ${ALLOWED_LETTERS}`)\r\n\t\t\t\t\tbreak\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (!data.trailerDigits) {\r\n\t\t\terrors.push('Не указаны цифры номера прицепа')\r\n\t\t} else if (data.trailerDigits.length !== 4) {\r\n\t\t\terrors.push('Цифровая часть должна содержать ровно 4 цифры')\r\n\t\t} else if (!/^\\d{4}$/.test(data.trailerDigits)) {\r\n\t\t\terrors.push('Цифровая часть должна содержать только цифры')\r\n\t\t}\r\n\r\n\t\tif (!data.region) {\r\n\t\t\terrors.push('Не указан код региона')\r\n\t\t} else if (data.region.length < 2 || data.region.length > 3) {\r\n\t\t\terrors.push('Код региона должен содержать 2 или 3 цифры')\r\n\t\t} else if (!/^\\d{2,3}$/.test(data.region)) {\r\n\t\t\terrors.push('Код региона должен содержать только цифры')\r\n\t\t} else if (data.region === '00' || data.region === '000') {\r\n\t\t\terrors.push('Код региона не может состоять только из нулей')\r\n\t\t}\r\n\r\n\t\treturn {\r\n\t\t\tisValid: errors.length === 0,\r\n\t\t\terrors,\r\n\t\t\twarnings,\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Валидация для тракторов (верх NNNN, низ LL RR(R))\r\n\t * Формат: 1234 АБ 77\r\n\t */\r\n\tprivate static validateTractor(data: LicensePlateData): ValidationResult {\r\n\t\tconst errors: string[] = []\r\n\t\tconst warnings: string[] = []\r\n\r\n\t\t// Проверяем верхнюю строку (4 цифры)\r\n\t\tif (!data.topDigits) {\r\n\t\t\terrors.push('Не указаны цифры верхней строки')\r\n\t\t} else if (data.topDigits.length !== 4) {\r\n\t\t\terrors.push('Верхняя строка должна содержать ровно 4 цифры')\r\n\t\t} else if (!/^\\d{4}$/.test(data.topDigits)) {\r\n\t\t\terrors.push('Верхняя строка должна содержать только цифры')\r\n\t\t}\r\n\r\n\t\t// Проверяем нижнюю строку (2 буквы)\r\n\t\tif (!data.bottomLetters) {\r\n\t\t\terrors.push('Не указаны буквы нижней строки')\r\n\t\t} else if (data.bottomLetters.length !== 2) {\r\n\t\t\terrors.push('Нижняя строка должна содержать ровно 2 буквы')\r\n\t\t} else {\r\n\t\t\tfor (const letter of data.bottomLetters) {\r\n\t\t\t\tif (!ALLOWED_LETTERS.includes(letter)) {\r\n\t\t\t\t\terrors.push(`Буква \"${letter}\" не разрешена. Используйте: ${ALLOWED_LETTERS}`)\r\n\t\t\t\t\tbreak\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// Проверяем код региона нижней строки\r\n\t\tif (!data.bottomRegion) {\r\n\t\t\terrors.push('Не указан код региона')\r\n\t\t} else if (data.bottomRegion.length < 2 || data.bottomRegion.length > 3) {\r\n\t\t\terrors.push('Код региона должен содержать 2 или 3 цифры')\r\n\t\t} else if (!/^\\d{2,3}$/.test(data.bottomRegion)) {\r\n\t\t\terrors.push('Код региона должен содержать только цифры')\r\n\t\t} else if (data.bottomRegion === '00' || data.bottomRegion === '000') {\r\n\t\t\terrors.push('Код региона не может состоять только из нулей')\r\n\t\t}\r\n\r\n\t\treturn {\r\n\t\t\tisValid: errors.length === 0,\r\n\t\t\terrors,\r\n\t\t\twarnings,\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Валидация для мотоциклов (верх NNNN, низ LL RR(R))\r\n\t * Формат: 5678 ВГ 77\r\n\t */\r\n\tprivate static validateMotorcycle(data: LicensePlateData): ValidationResult {\r\n\t\t// Для мотоциклов используется та же валидация, что и для тракторов\r\n\t\treturn this.validateTractor(data)\r\n\t}\r\n\r\n\t/**\r\n\t * Генерация текстового представления номера\r\n\t */\r\n\tstatic generatePlateText(data: LicensePlateData): string {\r\n\t\tswitch (data.category) {\r\n\t\t\tcase 'standard':\r\n\t\t\t\tif (data.letter1 && data.digits && data.letters && data.region) {\r\n\t\t\t\t\treturn `${data.letter1}${data.digits}${data.letters} ${data.region}`\r\n\t\t\t\t}\r\n\t\t\t\tbreak\r\n\t\t\tcase 'trailer':\r\n\t\t\t\tif (data.trailerLetters && data.trailerDigits && data.region) {\r\n\t\t\t\t\treturn `${data.trailerLetters}${data.trailerDigits} ${data.region}`\r\n\t\t\t\t}\r\n\t\t\t\tbreak\r\n\t\t\tcase 'tractor':\r\n\t\t\tcase 'motorcycle':\r\n\t\t\t\tif (data.topDigits && data.bottomLetters && data.bottomRegion) {\r\n\t\t\t\t\treturn `${data.topDigits} ${data.bottomLetters} ${data.bottomRegion}`\r\n\t\t\t\t}\r\n\t\t\t\tbreak\r\n\t\t}\r\n\t\treturn ''\r\n\t}\r\n\r\n\t/**\r\n\t * Парсинг номера из строки\r\n\t */\r\n\tstatic parseFromString(plateText: string, category: VehicleCategory): LicensePlateData | null {\r\n\t\tconst cleaned = plateText.replace(/\\s+/g, ' ').trim().toUpperCase()\r\n\r\n\t\ttry {\r\n\t\t\tswitch (category) {\r\n\t\t\t\tcase 'standard': {\r\n\t\t\t\t\t// Формат: А123ВС 77 или А123ВС77\r\n\t\t\t\t\tconst match = cleaned.match(/^([АВЕКМНОРСТУХ])(\\d{3})([АВЕКМНОРСТУХ]{2})\\s*(\\d{2,3})$/)\r\n\t\t\t\t\tif (match) {\r\n\t\t\t\t\t\treturn {\r\n\t\t\t\t\t\t\tcategory: 'standard',\r\n\t\t\t\t\t\t\tletter1: match[1],\r\n\t\t\t\t\t\t\tdigits: match[2],\r\n\t\t\t\t\t\t\tletters: match[3],\r\n\t\t\t\t\t\t\tregion: match[4],\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbreak\r\n\t\t\t\t}\r\n\t\t\t\tcase 'trailer': {\r\n\t\t\t\t\t// Формат: ММ9768 77 или ММ976877\r\n\t\t\t\t\tconst match = cleaned.match(/^([АВЕКМНОРСТУХ]{2})(\\d{4})\\s*(\\d{2,3})$/)\r\n\t\t\t\t\tif (match) {\r\n\t\t\t\t\t\treturn {\r\n\t\t\t\t\t\t\tcategory: 'trailer',\r\n\t\t\t\t\t\t\ttrailerLetters: match[1],\r\n\t\t\t\t\t\t\ttrailerDigits: match[2],\r\n\t\t\t\t\t\t\tregion: match[3],\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbreak\r\n\t\t\t\t}\r\n\t\t\t\tcase 'tractor':\r\n\t\t\t\tcase 'motorcycle': {\r\n\t\t\t\t\t// Формат: 1234 АБ 77 или 1234АБ77\r\n\t\t\t\t\tconst match = cleaned.match(/^(\\d{4})\\s*([АВЕКМНОРСТУХ]{2})\\s*(\\d{2,3})$/)\r\n\t\t\t\t\tif (match) {\r\n\t\t\t\t\t\treturn {\r\n\t\t\t\t\t\t\tcategory,\r\n\t\t\t\t\t\t\ttopDigits: match[1],\r\n\t\t\t\t\t\t\tbottomLetters: match[2],\r\n\t\t\t\t\t\t\tbottomRegion: match[3],\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbreak\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t} catch (error) {\r\n\t\t\tconsole.error('Error parsing license plate:', error)\r\n\t\t}\r\n\r\n\t\treturn null\r\n\t}\r\n}\r\n\r\n/**\r\n * Утилитарные функции для работы с номерами\r\n */\r\nexport const licensePlateUtils = {\r\n\t/**\r\n\t * Фильтрация ввода для букв\r\n\t */\r\n\tfilterLetters: (input: string): string => {\r\n\t\treturn input\r\n\t\t\t.toUpperCase()\r\n\t\t\t.split('')\r\n\t\t\t.filter((char) => ALLOWED_LETTERS.includes(char))\r\n\t\t\t.join('')\r\n\t},\r\n\r\n\t/**\r\n\t * Фильтрация ввода для цифр\r\n\t */\r\n\tfilterDigits: (input: string): string => {\r\n\t\treturn input.replace(/\\D/g, '')\r\n\t},\r\n\r\n\t/**\r\n\t * Проверка валидности кода региона\r\n\t */\r\n\tisValidRegion: (region: string): boolean => {\r\n\t\tif (!/^\\d{2,3}$/.test(region)) return false\r\n\t\tconst code = parseInt(region)\r\n\t\treturn code > 0 && code <= 999\r\n\t},\r\n\r\n\t/**\r\n\t * Форматирование номера для отображения\r\n\t */\r\n\tformatForDisplay: (data: LicensePlateData): string => {\r\n\t\treturn LicensePlateValidator.generatePlateText(data)\r\n\t},\r\n\r\n\t/**\r\n\t * Получение примера номера для категории\r\n\t */\r\n\tgetExample: (category: VehicleCategory): string => {\r\n\t\tswitch (category) {\r\n\t\t\tcase 'standard':\r\n\t\t\t\treturn 'А123ВС 77'\r\n\t\t\tcase 'trailer':\r\n\t\t\t\treturn 'ММ9768 77'\r\n\t\t\tcase 'tractor':\r\n\t\t\t\treturn '1234 АБ 77'\r\n\t\t\tcase 'motorcycle':\r\n\t\t\t\treturn '5678 ВГ 77'\r\n\t\t\tdefault:\r\n\t\t\t\treturn ''\r\n\t\t}\r\n\t},\r\n\r\n\t/**\r\n\t * Получение описания формата для категории\r\n\t */\r\n\tgetFormatDescription: (category: VehicleCategory): string => {\r\n\t\tswitch (category) {\r\n\t\t\tcase 'standard':\r\n\t\t\t\treturn 'L NNN LL | RR(R) - буква, 3 цифры, 2 буквы, код региона'\r\n\t\t\tcase 'trailer':\r\n\t\t\t\treturn 'LL NNNN | RR(R) - 2 буквы, 4 цифры, код региона'\r\n\t\t\tcase 'tractor':\r\n\t\t\t\treturn 'Верх: NNNN, Низ: LL RR(R) - 4 цифры, 2 буквы, код региона'\r\n\t\t\tcase 'motorcycle':\r\n\t\t\t\treturn 'Верх: NNNN, Низ: LL RR(R) - 4 цифры, 2 буквы, код региона'\r\n\t\t\tdefault:\r\n\t\t\t\treturn ''\r\n\t\t}\r\n\t},\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}