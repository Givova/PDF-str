{"ast":null,"code":"import axios from \"axios\";\n// Базовый URL для API\nconst API_BASE_URL = process.env.REACT_APP_API_URL || \"http://localhost:5000/api\";\n\n// Создаем экземпляр axios\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  timeout: 30000 // 30 секунд таймаут для генерации PDF\n});\n\n// Сервис для работы с API\nexport class PdfGeneratorApi {\n  /**\r\n   * Генерация PDF с данными полиса\r\n   */\n  static async generatePdf(data) {\n    try {\n      const response = await api.post(\"/generate-pdf\", data, {\n        responseType: \"blob\" // Важно для получения файла\n      });\n\n      // Извлекаем имя файла из заголовков ответа\n      const contentDisposition = response.headers[\"content-disposition\"];\n      let filename = \"policy.pdf\";\n      if (contentDisposition) {\n        const filenameMatch = contentDisposition.match(/filename=\"(.+)\"/);\n        if (filenameMatch) {\n          filename = filenameMatch[1];\n        }\n      }\n      return {\n        blob: response.data,\n        filename: filename\n      };\n    } catch (error) {\n      var _error$response;\n      if ((_error$response = error.response) !== null && _error$response !== void 0 && _error$response.data) {\n        // Если ошибка содержит JSON, пытаемся ее прочитать\n        const errorText = await error.response.data.text();\n        try {\n          const errorData = JSON.parse(errorText);\n          throw new Error(errorData.error || \"Ошибка при генерации PDF\");\n        } catch {\n          throw new Error(\"Ошибка при генерации PDF\");\n        }\n      }\n      throw new Error(error.message || \"Ошибка при генерации PDF\");\n    }\n  }\n\n  /**\r\n   * Валидация даты\r\n   */\n  static async validateDate(date) {\n    try {\n      const response = await api.post(\"/validate-date\", {\n        date: date\n      });\n      return response.data;\n    } catch (error) {\n      var _error$response2, _error$response2$data;\n      return {\n        valid: false,\n        error: ((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : (_error$response2$data = _error$response2.data) === null || _error$response2$data === void 0 ? void 0 : _error$response2$data.error) || \"Ошибка валидации даты\"\n      };\n    }\n  }\n\n  /**\r\n   * Проверка работоспособности API\r\n   */\n  static async healthCheck() {\n    try {\n      const response = await api.get(\"/health\");\n      return response.data;\n    } catch (error) {\n      return {\n        error: error.message || \"API недоступен\"\n      };\n    }\n  }\n}\n\n/**\r\n * Утилита для скачивания файла\r\n */\nexport const downloadFile = (blob, filename) => {\n  const url = window.URL.createObjectURL(blob);\n  const link = document.createElement(\"a\");\n  link.href = url;\n  link.download = filename;\n  document.body.appendChild(link);\n  link.click();\n  document.body.removeChild(link);\n  window.URL.revokeObjectURL(url);\n};","map":{"version":3,"names":["axios","API_BASE_URL","process","env","REACT_APP_API_URL","api","create","baseURL","timeout","PdfGeneratorApi","generatePdf","data","response","post","responseType","contentDisposition","headers","filename","filenameMatch","match","blob","error","_error$response","errorText","text","errorData","JSON","parse","Error","message","validateDate","date","_error$response2","_error$response2$data","valid","healthCheck","get","downloadFile","url","window","URL","createObjectURL","link","document","createElement","href","download","body","appendChild","click","removeChild","revokeObjectURL"],"sources":["F:/Work/Projects/Clone-pdf/pdf-coordinate-example/frontend/src/services/api.ts"],"sourcesContent":["import axios, { AxiosResponse } from \"axios\"\r\nimport {\r\n\tPolicyData,\r\n\tApiResponse,\r\n\tValidationResult,\r\n\tDownloadResponse,\r\n} from \"../types\"\r\n\r\n// Базовый URL для API\r\nconst API_BASE_URL =\r\n\tprocess.env.REACT_APP_API_URL || \"http://localhost:5000/api\"\r\n\r\n// Создаем экземпляр axios\r\nconst api = axios.create({\r\n\tbaseURL: API_BASE_URL,\r\n\ttimeout: 30000, // 30 секунд таймаут для генерации PDF\r\n})\r\n\r\n// Сервис для работы с API\r\nexport class PdfGeneratorApi {\r\n\t/**\r\n\t * Генерация PDF с данными полиса\r\n\t */\r\n\tstatic async generatePdf(data: PolicyData): Promise<DownloadResponse> {\r\n\t\ttry {\r\n\t\t\tconst response: AxiosResponse<Blob> = await api.post(\r\n\t\t\t\t\"/generate-pdf\",\r\n\t\t\t\tdata,\r\n\t\t\t\t{\r\n\t\t\t\t\tresponseType: \"blob\", // Важно для получения файла\r\n\t\t\t\t}\r\n\t\t\t)\r\n\r\n\t\t\t// Извлекаем имя файла из заголовков ответа\r\n\t\t\tconst contentDisposition = response.headers[\"content-disposition\"]\r\n\t\t\tlet filename = \"policy.pdf\"\r\n\r\n\t\t\tif (contentDisposition) {\r\n\t\t\t\tconst filenameMatch = contentDisposition.match(/filename=\"(.+)\"/)\r\n\t\t\t\tif (filenameMatch) {\r\n\t\t\t\t\tfilename = filenameMatch[1]\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\treturn {\r\n\t\t\t\tblob: response.data,\r\n\t\t\t\tfilename: filename,\r\n\t\t\t}\r\n\t\t} catch (error: any) {\r\n\t\t\tif (error.response?.data) {\r\n\t\t\t\t// Если ошибка содержит JSON, пытаемся ее прочитать\r\n\t\t\t\tconst errorText = await error.response.data.text()\r\n\t\t\t\ttry {\r\n\t\t\t\t\tconst errorData = JSON.parse(errorText)\r\n\t\t\t\t\tthrow new Error(errorData.error || \"Ошибка при генерации PDF\")\r\n\t\t\t\t} catch {\r\n\t\t\t\t\tthrow new Error(\"Ошибка при генерации PDF\")\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tthrow new Error(error.message || \"Ошибка при генерации PDF\")\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Валидация даты\r\n\t */\r\n\tstatic async validateDate(date: string): Promise<ValidationResult> {\r\n\t\ttry {\r\n\t\t\tconst response: AxiosResponse<ValidationResult> = await api.post(\r\n\t\t\t\t\"/validate-date\",\r\n\t\t\t\t{\r\n\t\t\t\t\tdate: date,\r\n\t\t\t\t}\r\n\t\t\t)\r\n\t\t\treturn response.data\r\n\t\t} catch (error: any) {\r\n\t\t\treturn {\r\n\t\t\t\tvalid: false,\r\n\t\t\t\terror: error.response?.data?.error || \"Ошибка валидации даты\",\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Проверка работоспособности API\r\n\t */\r\n\tstatic async healthCheck(): Promise<ApiResponse> {\r\n\t\ttry {\r\n\t\t\tconst response: AxiosResponse<ApiResponse> = await api.get(\"/health\")\r\n\t\t\treturn response.data\r\n\t\t} catch (error: any) {\r\n\t\t\treturn {\r\n\t\t\t\terror: error.message || \"API недоступен\",\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\n\r\n/**\r\n * Утилита для скачивания файла\r\n */\r\nexport const downloadFile = (blob: Blob, filename: string): void => {\r\n\tconst url = window.URL.createObjectURL(blob)\r\n\tconst link = document.createElement(\"a\")\r\n\tlink.href = url\r\n\tlink.download = filename\r\n\tdocument.body.appendChild(link)\r\n\tlink.click()\r\n\tdocument.body.removeChild(link)\r\n\twindow.URL.revokeObjectURL(url)\r\n}\r\n\r\n\r\n\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}